/* ------ Basic JavaScript: Generate Random Fractions with JavaScript
Random numbers are useful for creating random behavior.
JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and not quite up to 1 (exclusive). Thus Math.random() can return a 0 but never quite return a 1

Note
Like Storing Values with the Equal Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function.


/* -------------------------------------------------------------- */

function randomFraction() {

    // Only change code below this line.
  
    return Math.random();
  
    // Only change code above this line.
  }
  
  
  // randomFraction should return a random number.
  // The number returned by randomFraction should be a decimal.
  // You should be using Math.random to generate the random decimal number.
  
  /* -------------------------------------------------------------- */
  
  
  var randomNumberBetween0and19 = Math.floor(Math.random() * 20);
  
  function randomWholeNum() {
  
    // Only change code below this line.
  
    return Math.floor(Math.random() * 10);
  }
  
  
  // The result of randomWholeNum should be a whole number.
  // You should be using Math.random to generate a random number.
  // You should have multiplied the result of Math.random by 10 to make it a number that is between zero and nine.
  // You should use Math.floor to remove the decimal part of the number.
  
  
  /* -------------------------------------------------------------- */
  
  
  // Example
  function ourRandomRange(ourMin, ourMax) {
  
    return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
  }
  
  ourRandomRange(1, 9);
  
  // Only change code below this line.
  
  function randomRange(myMin, myMax) {
  
    return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin; // Change this line
  
  }
  
  // Change these values to test your function
  var myRandom = randomRange(5, 15);
  
  
  
  // The lowest random number that can be generated by randomRange should be equal to your minimum number, myMin.
  // The highest random number that can be generated by randomRange should be equal to your maximum number, myMax.
  // The random number generated by randomRange should be an integer, not a decimal.
  // randomRange should use both myMax and myMin, and return a random number in your range.
  
  
  /* -------------------------------------------------------------- */
  
  
  function convertToInteger(str) {
    return parseInt(str);
  }
  
  convertToInteger("56");
  
  
  
  // convertToInteger should use the parseInt() function
  // convertToInteger("56") should return a number
  // convertToInteger("56") should return 56
  // convertToInteger("77") should return 77
  // convertToInteger("JamesBond") should return NaN
  
  /* -------------------------------------------------------------- */
  
  
  /* ----- The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.
  
  The function call looks like:
  
  parseInt(string, radix);
  
  And here's an example:
  
  var a = parseInt("11", 2);
  
  The radix variable says that "11" is in the binary system, or base 2. This example converts the string "11" to an integer 3. -----*/
  
  function convertToInteger(str) {
    return parseInt(str, 2)
  }
  
  convertToInteger("10011");
  
  
  // convertToInteger should use the parseInt() function
  // convertToInteger("10011") should return a number
  // convertToInteger("10011") should return 19
  // convertToInteger("JamesBond") should return NaN
  
  
  /* -------------------------------------------------------------- */
  
  
  function checkEqual(a, b) {
    return a === b ? true : false;
  }
  
  checkEqual(1, 2);
  
  
  // checkEqual should use the conditional operator
  // checkEqual(1, 2) should return false
  // checkEqual(1, 1) should return true
  // checkEqual(1, -1) should return false
  
  
  /* -------------------------------------------------------------- */
  
  
  
  
  /* -------------------------------------------------------------- */
  
  
  
  
  /* -------------------------------------------------------------- */